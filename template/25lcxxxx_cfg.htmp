////////////////////////////////////////////////////////////////////////////////
/**
*@file      25lcxxxx_cfg.h
*@brief     Configuration for 25LCxxxx EEPROM device
*@author    Ziga Miklosic
*@date      08.05.2021
*@version	V1.0.0
*/
////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup 25LCXXXX_CFG
* @{ <!-- BEGIN GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

#ifndef _25LCXXXX_CFG_H_
#define _25LCXXXX_CFG_H_

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include <stdint.h>
#include "project_config.h"

// Debug communication port
#include "middleware/debug_comm_port/com_dbg.h"

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

/**
 * 	Enable/Disable debug mode
 */
#define _25LCXXXX_CFG_DEBUG_EN				( 1 )

/**
 * 	Enable/Disable assertions
 */
#define _25LCXXXX_CFG_ASSERT_EN				( 1 )

/**
 * 	Device number address bits
 *
 * 	@note 	This consequent defines memory size of device. E.g. for 25LC640
 * 			density in bits are 64k, meaning that 8k x 8 memory arrangement.
 * 			Therefore 1024 * 8 -> 0x2000 -> 12 bit to describe.
 *
 * 	@note	User can obtain information about number of address bits
 * 			in Table 2-2 of DS22040A in Microchip document
 */
#define _25LCXXXX_CFG_ADDR_BIT_NUM			( 12 )

/**
 * 	Device page size
 *
 * 	@note	This defines physical boundaries inside memory chip and
 * 			are important when reading/writing across two neighbor
 * 			pages.
 *
 * 	@note	User can obtain information about page size in Table 2-2
 * 			of DS22040A in Microchip document
 *
 * 	Unit: bytes
 */
#define _25LCXXXX_CFG_PAGE_SIZE_BYTE		( 32 )



/**
 * 	Debug communication port macros
 */
#if ( 1 == _25LCXXXX_CFG_DEBUG_EN )
	#define _25LCXXXX_DBG_PRINT( ... )					( com_dbg_print( eCOM_DBG_CH_ERR, (const char*) __VA_ARGS__ ))
#else
	#define _25LCXXXX_DBG_PRINT( ... )					{ ; }

#endif

/**
 * 	 Assertion macros
 */
#if ( 1 == _25LCXXXX_CFG_ASSERT_EN )
	#define _25LCXXXX_ASSERT(x)							PROJECT_CONFIG_ASSERT(x)
#else
	#define _25LCXXXX_ASSERT(x)							{ ; }
#endif


#endif // _25LCXXXX_CFG_H_
