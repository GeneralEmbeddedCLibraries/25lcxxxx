////////////////////////////////////////////////////////////////////////////////
/**
*@file      25lcxxxx_if.c
*@brief     Application interface for 25LCxxxx EEPROM device
*@author    Ziga Miklosic
*@date      08.05.2021
*@version	V1.0.0
*/
////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup 25LCXXXX_IF
* @{ <!-- BEGIN GROUP -->
*
*
* 	Put code that is platform depended inside code block start with
* 	"USER_CODE_BEGIN" and with end of "USER_CODE_END".
*
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include "stm32f7xx_hal.h"
#include "25lcxxxx_if.h"

// USER INCLUDES BEGIN...

//#include "drivers/peripheral/i2c/i2c.h"

// USER INCLUDES END...

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Function Prototypes
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*		Initialize low level interface
*
* @note	User shall provide definition of that function based on used platform!
*
* @return 		status - Status of initialization
*/
////////////////////////////////////////////////////////////////////////////////
_25lcxxxx_status_t _25lcxxxx_if_init(void)
{
	_25lcxxxx_status_t status = e25LCXXXX_OK;

	// USER CODE BEGIN...

	// Left empty as periphery is initilize elswhere...

	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Write to register
*
* @note	User shall provide definition of that function based on used platform!
*
* @param[in] 	addr 		- Register address
* @param[in] 	p_tx_data	- Pointer to transmit data
* @param[in] 	size		- Size of transmit data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
_25lcxxxx_status_t _25lcxxxx_if_write_register(const uint8_t addr, const uint8_t * p_tx_data, const uint32_t size)
{
	_25lcxxxx_status_t status = e25LCXXXX_OK;

	// USER CODE BEGIN...



	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
*		Read from register
*
* @note	User shall provide definition of that function based on used platform!
*
* @param[in] 	addr 		- Register address
* @param[in] 	p_rx_data	- Pointer to receive data
* @param[in] 	size		- Size of received data
* @return 		status 		- Status of operation
*/
////////////////////////////////////////////////////////////////////////////////
_25lcxxxx_status_t _25lcxxxx_if_read_register(const uint8_t addr, uint8_t * p_rx_data, const uint32_t size)
{
	_25lcxxxx_status_t status = e25LCXXXX_OK;

	// USER CODE BEGIN...



	// USER CODE END...

	return status;
}

////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

